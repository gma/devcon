#!/usr/bin/env bash

## Functions

usage()
{
    cat <<EOF
Usage: $(basename "$0") <command> [options]

devcon is a wrapper around the devcontainer/cli script, designed to make
it easier to use devcontainers with tools that don't provide special support
for them (i.e. tools that aren't VS Code).

It sets some default arguments for you when calling the devcontainer build, up,
down, and exec subcommands.

Any arguments that you pass to a devcon subcommand are passed straight through
to the equivalent devcontainer subcommand.

e.g.

    devcon exec --blah => devcontainer exec [devcon's own options] --blah

devcon also provides two extra commands:

    devcon down    # uses docker compose to stop all containers
    devcon login   # equivalent to 'devcon exec \$SHELL'

It also supports:

- setting up SSH agent forwarding within the container
- making ~/.gitconfig and ~/.gitignore available within the container
- installing your dotfiles (set the DEVCON_DOTFILES var to your repo URL)

Run 'devcon help' to see a list of the available devcontainer subcommands.

EOF

    exit 1
}


die()
{
    local message
    message="$1"
    echo "ERROR: $message" 1>&2
    exit 1
}


forwarding_ssh_agent()
{
    test -n "$SSH_AUTH_SOCK"
}


## Main program

COMMAND="$1"
shift
[ -z "$COMMAND" ] && usage

[ -f .devcontainer/devcontainer.json ] || die "devcontainer.json not found"

[ -n "$DEBUG" ] && set -x

DEVCON_APT_PACKAGES="${DEVCON_APT_PACKAGES:-bash-completion,file}"
DEVCON_USER="${DEVCON_USER:-vscode}"
SSH_AGENT_ENV_OPTIONS=(--remote-env SSH_AUTH_SOCK=/tmp/.ssh-auth.sock)

# Choose options to pass to `devcontainer build`
#
if [ -n "$DEVCON_FEATURES" ]; then
    DEVCON_FEATURES="${DEVCON_FEATURES},"
fi
read -r -d '' ADDITIONAL_FEATURES << END_OF_JSON
{
    ${DEVCON_FEATURES}
    "ghcr.io/rocker-org/devcontainer-features/apt-packages:1": {
        "packages": "${DEVCON_APT_PACKAGES}"
    }
}
END_OF_JSON
FEATURES=(
    --additional-features "$ADDITIONAL_FEATURES"
)

BUILD_OPTIONS=(--workspace-folder .)
BUILD_OPTIONS+=("${FEATURES[@]}")

# Choose options to pass to `devcontainer exec`
EXEC_OPTIONS=(
    --remote-env COLUMNS="$COLUMNS"
    --remote-env LINES="$LINES"
    --workspace-folder .
)
if forwarding_ssh_agent; then
    EXEC_OPTIONS+=("${SSH_AGENT_ENV_OPTIONS[@]}")
fi

# Choose options to pass to `devcontainer up`
UP_OPTIONS=(
    "${BUILD_OPTIONS[@]}"
)
if [ -e ~/.gitconfig ]; then
    UP_OPTIONS+=(
        --mount "type=bind,source=$HOME/.gitconfig,target=/home/$DEVCON_USER/.gitconfig"
    )
fi
if [ -e ~/.gitignore ]; then
    UP_OPTIONS+=(
        --mount "type=bind,source=$HOME/.gitignore,target=/home/$DEVCON_USER/.gitignore"
    )
fi
if forwarding_ssh_agent; then
    UP_OPTIONS+=(
        --mount "type=bind,source=$HOME/.ssh,target=/home/$DEVCON_USER/.ssh"
        --mount "type=bind,source=$SSH_AUTH_SOCK,target=/tmp/.ssh-auth.sock"
        "${SSH_AGENT_ENV_OPTIONS[@]}"
    )
fi
if [ -n "$DEVCON_DOTFILES" ]; then
    UP_OPTIONS+=(
        --dotfiles-repository "$DEVCON_DOTFILES"
        --dotfiles-target-path "~/$(basename "$DEVCON_DOTFILES" .git)"
    )
fi


## Run the devcontainer command

set -euo pipefail

case "$COMMAND" in
    build)
        devcontainer "$COMMAND" "${BUILD_OPTIONS[@]}" "$@"
        ;;
    down)
        docker compose -f .devcontainer/compose.yaml down "$@"
        ;;
    exec)
        devcontainer "$COMMAND" "${EXEC_OPTIONS[@]}" "$@"
        ;;
    login)
        devcontainer exec "${EXEC_OPTIONS[@]}" "$SHELL" "$@"
        ;;
    up)
        devcontainer "$COMMAND" "${UP_OPTIONS[@]}" "$@"
        ;;
    "")
        usage
        ;;
    help)
        cat <<EOF
$(basename "$0") is a devcontainer wrapper. Run without arguments for details.

-- showing devcontainer help --

EOF
        devcontainer "$COMMAND" "$@"
        ;;
    *)
        devcontainer "$COMMAND" "$@"
        ;;
esac
